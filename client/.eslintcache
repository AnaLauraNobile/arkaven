[{"/home/kuinoso/Projects/arkaven/client/src/index.js":"1","/home/kuinoso/Projects/arkaven/client/src/App.js":"2","/home/kuinoso/Projects/arkaven/client/src/reportWebVitals.js":"3","/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Main/index.jsx":"4","/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Main/index.jsx":"5","/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Main/styles.js":"6","/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/deck.js":"7","/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Board/index.jsx":"8","/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Board/styles.js":"9","/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Card/index.jsx":"10","/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Card/styles.js":"11","/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Snake/index.jsx":"12","/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Snake/styles.js":"13","/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Food/index.jsx":"14","/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Food/styles.js":"15","/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Main/styles.js":"16","/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Main/index.jsx":"17","/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Stage/index.jsx":"18","/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Display/index.jsx":"19","/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/StartButton/index.jsx":"20","/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Cell/index.jsx":"21","/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/gameHelpers.js":"22"},{"size":500,"mtime":1609763141572,"results":"23","hashOfConfig":"24"},{"size":606,"mtime":1610632596366,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1609763141572,"results":"26","hashOfConfig":"24"},{"size":6718,"mtime":1610391460903,"results":"27","hashOfConfig":"24"},{"size":4994,"mtime":1610374486051,"results":"28","hashOfConfig":"24"},{"size":675,"mtime":1610052809979,"results":"29","hashOfConfig":"24"},{"size":783,"mtime":1609958073171,"results":"30","hashOfConfig":"24"},{"size":784,"mtime":1609965708807,"results":"31","hashOfConfig":"24"},{"size":349,"mtime":1610370202175,"results":"32","hashOfConfig":"24"},{"size":790,"mtime":1610051869843,"results":"33","hashOfConfig":"24"},{"size":212,"mtime":1610370272181,"results":"34","hashOfConfig":"24"},{"size":524,"mtime":1610387585932,"results":"35","hashOfConfig":"24"},{"size":293,"mtime":1610388134709,"results":"36","hashOfConfig":"24"},{"size":359,"mtime":1610387252507,"results":"37","hashOfConfig":"24"},{"size":252,"mtime":1610388958567,"results":"38","hashOfConfig":"24"},{"size":351,"mtime":1610388167147,"results":"39","hashOfConfig":"24"},{"size":556,"mtime":1610635773200,"results":"40","hashOfConfig":"24"},{"size":235,"mtime":1610636000451,"results":"41","hashOfConfig":"24"},{"size":165,"mtime":1610631675308,"results":"42","hashOfConfig":"24"},{"size":164,"mtime":1610632719375,"results":"43","hashOfConfig":"24"},{"size":146,"mtime":1610631545926,"results":"44","hashOfConfig":"24"},{"size":195,"mtime":1610635680439,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"vkcqd0",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/kuinoso/Projects/arkaven/client/src/index.js",[],["92","93"],"/home/kuinoso/Projects/arkaven/client/src/App.js",[],"/home/kuinoso/Projects/arkaven/client/src/reportWebVitals.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Main/index.jsx",["94","95"],"import React, { useState, useEffect, useRef } from 'react';\nimport Snake from '../Snake';\nimport Food from '../Food';\nimport Swal from 'sweetalert2';\nimport bite from '../../../sounds/bite.mp3';\nimport lose from '../../../sounds/loose.mp3';\nimport os from '../../../sounds/osSnake.mp3';\nimport { useStyles } from './styles.js';\n\nconst getRandomCoordinates = () => {\n    let min = 1;\n    let max = 98;\n    let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n    let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n\n    return [x, y];\n};\n\nconst colors = ['#FF00FF', '#FF0099', '#33FF00', '#00FFFF', '#FF6600', '#0062FF', '#FFFF33'];\n\nexport default function Main() {\n    const classes = useStyles();\n    const myRef1 = useRef();\n    const myRef2 = useRef();\n    const myRef3 = useRef();\n    const [started, setStarted] = useState(false);\n    const [randomColor, setRandomColor] = useState('');\n    const [snakeColor, setSnakeColor] = useState('');\n    const [food, setFood] = useState(getRandomCoordinates());\n    const [start, setStart] = useState(true);\n    const [speed, setSpeed] = useState(150);\n    const [direction, setDirection] = useState('RIGHT');\n    const [snakeDots, setSnakeDots] = useState([\n        [0, 0],\n        [2, 0]\n    ]);\n\n    const getRandomColor = () => {\n        let color = colors[Math.floor(Math.random() * colors.length)];\n        if(color !== randomColor) {\n            console.log(color, randomColor);\n            setRandomColor(color);\n            return;\n        };\n        getRandomColor();\n    };\n\n    const loadMedia = () => {\n        myRef1.current.load();\n        myRef2.current.load();\n        myRef3.current.load();\n    };\n\n    useEffect(() => {\n        document.onkeydown = onKeyDown;\n        loadMedia();\n        getRandomColor();\n    }, []);\n\n    const onKeyDown = (e) => {\n        e = e || window.event;\n        // eslint-disable-next-line default-case\n        switch (e.keyCode) {\n            case 38:\n                setDirection('UP');\n                break;\n            case 40:\n                setDirection('DOWN');\n                break;\n            case 37:\n                setDirection('LEFT');\n                break;\n            case 39:\n                setDirection('RIGHT');\n                break;\n        };\n    };\n\n    const moveSnake = () => {\n        if (start === true && started === true) {\n            let dots = [...snakeDots];\n            let head = dots[dots.length - 1];\n\n            // eslint-disable-next-line default-case\n            switch (direction) {\n                case 'RIGHT':\n                    head = [head[0] + 2, head[1]];\n                    break;\n                case 'LEFT':\n                    head = [head[0] - 2, head[1]];\n                    break;\n                case 'DOWN':\n                    head = [head[0], head[1] + 2];\n                    break;\n                case 'UP':\n                    head = [head[0], head[1] - 2];\n                    break;\n            };\n\n            dots.push(head);\n            dots.shift();\n            setSnakeDots(dots);\n        };\n    };\n\n\n    const useInterval = (callback, delay) => {\n        const savedCallback = useRef();\n\n        useEffect(() => {\n            savedCallback.current = callback;\n        }, [callback]);\n\n        useEffect(() => {\n            function tick() {\n                savedCallback.current();\n            }\n            if (delay !== null) {\n                let id = setInterval(tick, delay);\n                return () => clearInterval(id);\n            }\n        }, [delay]);\n    };\n\n    useInterval(moveSnake, speed);\n\n    const enlargeSnake = () => {\n        let newSnake = [...snakeDots];\n        newSnake.unshift([]);\n        setSnakeDots(newSnake);\n    };\n\n    const checkIfEat = () => {\n        let head = snakeDots[snakeDots.length - 1];\n        let foodItem = food;\n        if (head[0] === foodItem[0] && head[1] === foodItem[1]) {\n            myRef1.current.volume = 0.1;\n            myRef1.current.play();\n            setSnakeColor(randomColor);\n            getRandomColor();\n            setFood(getRandomCoordinates());\n            enlargeSnake();\n            if (speed > 60) {\n                setSpeed(speed - 3);\n            };\n        };\n    };\n\n    const onGameOver = () => {\n        myRef3.current.currentTime = 0;\n        myRef3.current.pause();\n        myRef2.current.volume = 0.1;\n        myRef2.current.play();\n        setSnakeColor('white');\n        setStart(false)\n        setSpeed(150);\n        setDirection('RIGHT');\n        setSnakeDots([\n            [0, 0],\n            [2, 0]\n        ]);\n        getRandomColor();\n        Swal.fire(`Your score was ${snakeDots.length - 2}`)\n            .then(() => {\n                setStart(true);\n                myRef3.current.volume = 0.05;\n                myRef3.current.play();\n            });\n    };\n\n    const checkIfOutOfBorders = () => {\n        let head = snakeDots[snakeDots.length - 1];\n        if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n            onGameOver();\n        };\n    };\n\n    const checkIfCollapsed = () => {\n        let snake = [...snakeDots];\n        let head = snake[snake.length - 1];\n        snake.pop();\n        snake.forEach(dot => {\n            if (head[0] === dot[0] && head[1] === dot[1]) {\n                onGameOver();\n            };\n        });\n    };\n\n    const startGame = () => {\n        setStarted(true);\n        myRef3.current.volume = 0.05;\n        myRef3.current.play();\n    };\n\n    useEffect(() => {\n        checkIfOutOfBorders();\n        checkIfCollapsed();\n        checkIfEat();\n    }, [snakeDots]);\n\n    return (\n        <div>\n            {started ?\n                <div>\n                    <h3 className={classes.score}>Score: {snakeDots.length - 2}</h3>\n                    <div className={classes.container}>\n                        <Snake snakeDots={snakeDots} color={snakeColor}/>\n                        <Food dot={food} color={randomColor}/>\n                    </div>\n                </div>\n                :\n                <div>\n                    <h1>Neon Snake Game</h1>\n                    <h3>This snake is hungry! Are you ready for the challenge?</h3>\n                    <button onClick={startGame}>\n                        START\n                </button>\n                </div>\n            }\n            <audio\n                ref={myRef1}\n                src={bite}\n                loop={false}\n            />\n            <audio\n                ref={myRef2}\n                src={lose}\n                loop={false}\n            />\n            <audio\n                ref={myRef3}\n                src={os}\n                loop={true}\n            />\n        </div>\n    )\n};","/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Main/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Main/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/deck.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Board/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Board/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Card/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Card/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Snake/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Snake/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Food/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Food/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Main/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Main/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Stage/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Display/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/StartButton/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Cell/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/gameHelpers.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":58,"column":8,"nodeType":"102","endLine":58,"endColumn":10,"suggestions":"103"},{"ruleId":"100","severity":1,"message":"104","line":199,"column":8,"nodeType":"102","endLine":199,"endColumn":19,"suggestions":"105"},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRandomColor'. Either include it or remove the dependency array.","ArrayExpression",["108"],"React Hook useEffect has missing dependencies: 'checkIfCollapsed', 'checkIfEat', and 'checkIfOutOfBorders'. Either include them or remove the dependency array.",["109"],"no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},"Update the dependencies array to be: [getRandomColor]",{"range":"114","text":"115"},"Update the dependencies array to be: [checkIfCollapsed, checkIfEat, checkIfOutOfBorders, snakeDots]",{"range":"116","text":"117"},[1813,1815],"[getRandomColor]",[5615,5626],"[checkIfCollapsed, checkIfEat, checkIfOutOfBorders, snakeDots]"]