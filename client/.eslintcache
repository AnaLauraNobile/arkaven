[{"/home/kuinoso/Projects/arkaven/client/src/index.js":"1","/home/kuinoso/Projects/arkaven/client/src/reportWebVitals.js":"2","/home/kuinoso/Projects/arkaven/client/src/App.js":"3","/home/kuinoso/Projects/arkaven/client/src/redux/storeCreator.js":"4","/home/kuinoso/Projects/arkaven/client/src/redux/userReducer/actions.js":"5","/home/kuinoso/Projects/arkaven/client/src/redux/gameReducer/actions.js":"6","/home/kuinoso/Projects/arkaven/client/src/redux/gameReducer/reducer.js":"7","/home/kuinoso/Projects/arkaven/client/src/redux/userReducer/reducer.js":"8","/home/kuinoso/Projects/arkaven/client/src/redux/userReducer/constants.js":"9","/home/kuinoso/Projects/arkaven/client/src/redux/gameReducer/constants.js":"10","/home/kuinoso/Projects/arkaven/client/src/components/Footer/index.jsx":"11","/home/kuinoso/Projects/arkaven/client/src/components/Home/index.jsx":"12","/home/kuinoso/Projects/arkaven/client/src/components/Profile/index.jsx":"13","/home/kuinoso/Projects/arkaven/client/src/components/NewPassword/index.jsx":"14","/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Main/index.jsx":"15","/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Main/index.jsx":"16","/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Main/index.jsx":"17","/home/kuinoso/Projects/arkaven/client/src/components/2048Game/Main/index.jsx":"18","/home/kuinoso/Projects/arkaven/client/src/components/Navbar/index.jsx":"19","/home/kuinoso/Projects/arkaven/client/src/components/Footer/styles.js":"20","/home/kuinoso/Projects/arkaven/client/src/components/Home/styles.js":"21","/home/kuinoso/Projects/arkaven/client/src/components/Profile/styles.js":"22","/home/kuinoso/Projects/arkaven/client/src/components/NewPassword/styles.js":"23","/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Main/styles.js":"24","/home/kuinoso/Projects/arkaven/client/src/components/2048Game/Main/styles.js":"25","/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Main/styles.js":"26","/home/kuinoso/Projects/arkaven/client/src/components/Navbar/styles.js":"27","/home/kuinoso/Projects/arkaven/client/src/components/2048Game/gameHelpers.js":"28","/home/kuinoso/Projects/arkaven/client/src/hooks/useInterval.js":"29","/home/kuinoso/Projects/arkaven/client/src/hooks/useTetrisStatus.js":"30","/home/kuinoso/Projects/arkaven/client/src/hooks/useTetrisStage.js":"31","/home/kuinoso/Projects/arkaven/client/src/hooks/useTetrisPlayer.js":"32","/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/gameHelpers.js":"33","/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Main/styles.js":"34","/home/kuinoso/Projects/arkaven/client/src/components/MobileGames/index.jsx":"35","/home/kuinoso/Projects/arkaven/client/src/components/UpdatePassword/index.jsx":"36","/home/kuinoso/Projects/arkaven/client/src/components/UpdateInfo/index.jsx":"37","/home/kuinoso/Projects/arkaven/client/src/components/Display/index.jsx":"38","/home/kuinoso/Projects/arkaven/client/src/components/UserScores/index.jsx":"39","/home/kuinoso/Projects/arkaven/client/src/components/Highscores/index.jsx":"40","/home/kuinoso/Projects/arkaven/client/src/components/2048Game/Block/index.jsx":"41","/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Stage/index.jsx":"42","/home/kuinoso/Projects/arkaven/client/src/components/ResetPassword/index.jsx":"43","/home/kuinoso/Projects/arkaven/client/src/components/Login/index.jsx":"44","/home/kuinoso/Projects/arkaven/client/src/components/SignUp/index.jsx":"45","/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/deck.js":"46","/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/tetrominos.js":"47","/home/kuinoso/Projects/arkaven/client/src/components/MobileGames/styles.js":"48","/home/kuinoso/Projects/arkaven/client/src/components/UpdatePassword/styles.js":"49","/home/kuinoso/Projects/arkaven/client/src/components/UpdateInfo/styles.js":"50","/home/kuinoso/Projects/arkaven/client/src/components/Display/styles.js":"51","/home/kuinoso/Projects/arkaven/client/src/components/UserScores/styles.js":"52","/home/kuinoso/Projects/arkaven/client/src/components/Highscores/styles.js":"53","/home/kuinoso/Projects/arkaven/client/src/components/2048Game/Block/styles.js":"54","/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Stage/styles.js":"55","/home/kuinoso/Projects/arkaven/client/src/components/ResetPassword/styles.js":"56","/home/kuinoso/Projects/arkaven/client/src/components/Login/styles.js":"57","/home/kuinoso/Projects/arkaven/client/src/components/SignUp/styles.js":"58","/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Board/index.jsx":"59","/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Food/index.jsx":"60","/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Snake/index.jsx":"61","/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Food/styles.js":"62","/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Snake/styles.js":"63","/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Board/styles.js":"64","/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Cell/index.jsx":"65","/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Cell/styles.js":"66","/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Card/index.jsx":"67","/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Card/styles.js":"68"},{"size":736,"mtime":1614093001223,"results":"69","hashOfConfig":"70"},{"size":362,"mtime":1609763141572,"results":"71","hashOfConfig":"70"},{"size":1810,"mtime":1614093060597,"results":"72","hashOfConfig":"70"},{"size":773,"mtime":1612879123802,"results":"73","hashOfConfig":"70"},{"size":699,"mtime":1613073298060,"results":"74","hashOfConfig":"70"},{"size":189,"mtime":1612879119666,"results":"75","hashOfConfig":"70"},{"size":339,"mtime":1612879094418,"results":"76","hashOfConfig":"70"},{"size":785,"mtime":1613073062071,"results":"77","hashOfConfig":"70"},{"size":207,"mtime":1613054385196,"results":"78","hashOfConfig":"70"},{"size":45,"mtime":1612879069806,"results":"79","hashOfConfig":"70"},{"size":1470,"mtime":1613674422483,"results":"80","hashOfConfig":"70"},{"size":1458,"mtime":1614092985706,"results":"81","hashOfConfig":"70"},{"size":2939,"mtime":1613592133924,"results":"82","hashOfConfig":"70"},{"size":3873,"mtime":1613674481857,"results":"83","hashOfConfig":"70"},{"size":11407,"mtime":1614109772716,"results":"84","hashOfConfig":"70"},{"size":8972,"mtime":1613672381591,"results":"85","hashOfConfig":"70"},{"size":9671,"mtime":1613672219694,"results":"86","hashOfConfig":"70"},{"size":14660,"mtime":1613671237423,"results":"87","hashOfConfig":"70"},{"size":6168,"mtime":1614103390009,"results":"88","hashOfConfig":"70"},{"size":965,"mtime":1613660803592,"results":"89","hashOfConfig":"70"},{"size":686,"mtime":1613656554194,"results":"90","hashOfConfig":"70"},{"size":1506,"mtime":1613670310032,"results":"91","hashOfConfig":"70"},{"size":2081,"mtime":1613669970656,"results":"92","hashOfConfig":"70"},{"size":1759,"mtime":1612965154856,"results":"93","hashOfConfig":"70"},{"size":1697,"mtime":1612880545268,"results":"94","hashOfConfig":"70"},{"size":1560,"mtime":1612966272129,"results":"95","hashOfConfig":"70"},{"size":1916,"mtime":1613660450240,"results":"96","hashOfConfig":"70"},{"size":780,"mtime":1611336724400,"results":"97","hashOfConfig":"70"},{"size":433,"mtime":1613674589917,"results":"98","hashOfConfig":"70"},{"size":847,"mtime":1613672255348,"results":"99","hashOfConfig":"70"},{"size":1630,"mtime":1613674604005,"results":"100","hashOfConfig":"70"},{"size":1814,"mtime":1613674597113,"results":"101","hashOfConfig":"70"},{"size":825,"mtime":1610714684779,"results":"102","hashOfConfig":"70"},{"size":1553,"mtime":1612963922899,"results":"103","hashOfConfig":"70"},{"size":371,"mtime":1614102682414,"results":"104","hashOfConfig":"70"},{"size":5919,"mtime":1613673111344,"results":"105","hashOfConfig":"70"},{"size":7412,"mtime":1613673051331,"results":"106","hashOfConfig":"70"},{"size":387,"mtime":1613674410595,"results":"107","hashOfConfig":"70"},{"size":992,"mtime":1614103499780,"results":"108","hashOfConfig":"70"},{"size":1108,"mtime":1613591224656,"results":"109","hashOfConfig":"70"},{"size":472,"mtime":1613674393730,"results":"110","hashOfConfig":"70"},{"size":531,"mtime":1613674553271,"results":"111","hashOfConfig":"70"},{"size":2807,"mtime":1613674499054,"results":"112","hashOfConfig":"70"},{"size":5103,"mtime":1614101272615,"results":"113","hashOfConfig":"70"},{"size":12411,"mtime":1614100971196,"results":"114","hashOfConfig":"70"},{"size":783,"mtime":1609958073171,"results":"115","hashOfConfig":"70"},{"size":1019,"mtime":1610714758051,"results":"116","hashOfConfig":"70"},{"size":620,"mtime":1614102786968,"results":"117","hashOfConfig":"70"},{"size":1935,"mtime":1613670682764,"results":"118","hashOfConfig":"70"},{"size":2815,"mtime":1613670546441,"results":"119","hashOfConfig":"70"},{"size":568,"mtime":1611843792797,"results":"120","hashOfConfig":"70"},{"size":804,"mtime":1612966744298,"results":"121","hashOfConfig":"70"},{"size":926,"mtime":1613588329294,"results":"122","hashOfConfig":"70"},{"size":383,"mtime":1611339462186,"results":"123","hashOfConfig":"70"},{"size":291,"mtime":1612966304774,"results":"124","hashOfConfig":"70"},{"size":2058,"mtime":1613668757629,"results":"125","hashOfConfig":"70"},{"size":2740,"mtime":1614106515372,"results":"126","hashOfConfig":"70"},{"size":3776,"mtime":1614106459170,"results":"127","hashOfConfig":"70"},{"size":785,"mtime":1613674446572,"results":"128","hashOfConfig":"70"},{"size":360,"mtime":1613674513766,"results":"129","hashOfConfig":"70"},{"size":525,"mtime":1613674530795,"results":"130","hashOfConfig":"70"},{"size":252,"mtime":1610388958567,"results":"131","hashOfConfig":"70"},{"size":293,"mtime":1610388134709,"results":"132","hashOfConfig":"70"},{"size":315,"mtime":1611864253555,"results":"133","hashOfConfig":"70"},{"size":596,"mtime":1613674539167,"results":"134","hashOfConfig":"70"},{"size":157,"mtime":1610644847479,"results":"135","hashOfConfig":"70"},{"size":791,"mtime":1613674452864,"results":"136","hashOfConfig":"70"},{"size":175,"mtime":1612815017028,"results":"137","hashOfConfig":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},"vkcqd0",{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"140"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"140"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"140"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"140"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"140"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"140"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"140"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},"/home/kuinoso/Projects/arkaven/client/src/index.js",[],["282","283"],"/home/kuinoso/Projects/arkaven/client/src/reportWebVitals.js",[],"/home/kuinoso/Projects/arkaven/client/src/App.js",["284","285"],"import React, { useEffect } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Route, HashRouter } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { getAllUsers } from './redux/userReducer/actions';\nimport { getAllGames } from './redux/gameReducer/actions';\nimport axios from 'axios';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport Home from './components/Home';\nimport Profile from './components/Profile';\nimport NewPassword from './components/NewPassword';\nimport MemoryGame from './components/memoryGame/Main';\nimport SnakeGame from './components/snakeGame/Main';\nimport TetrisGame from './components/tetrisGame/Main';\nimport Game2048 from './components/2048Game/Main';\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    axios.get('/api/allUsers')\n      .then(res => {\n        dispatch(getAllUsers(res.data));\n      })\n      .catch(err => console.log(err));\n\n    axios.get('/api/allGames')\n      .then(res => {\n        dispatch(getAllGames(res.data))\n      })\n      .catch(err => console.log(err));\n  }, []);\n\n  return (\n    <HashRouter basename='/' >\n      <Route path=\"/\" render={() => <Navbar />} />\n      <Route exact path=\"/\" render={() => <Home />} />\n      <Route exact path=\"/profile/:name\" render={() => <Profile />} />\n      <Route exact path=\"/reset/:token\" render={() => <NewPassword />} />\n      <Route exact path=\"/memoryGame\" render={() => <MemoryGame />} />\n      <Route exact path=\"/snakeGame\" render={() => <SnakeGame />} />\n      <Route exact path=\"/tetrisGame\" render={() => <TetrisGame />} />\n      <Route exact path=\"/2048Game\" render={() => <Game2048 />} />\n      <Route path=\"/\" render={() => <Footer />} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","/home/kuinoso/Projects/arkaven/client/src/redux/storeCreator.js",[],"/home/kuinoso/Projects/arkaven/client/src/redux/userReducer/actions.js",[],"/home/kuinoso/Projects/arkaven/client/src/redux/gameReducer/actions.js",[],"/home/kuinoso/Projects/arkaven/client/src/redux/gameReducer/reducer.js",[],"/home/kuinoso/Projects/arkaven/client/src/redux/userReducer/reducer.js",[],"/home/kuinoso/Projects/arkaven/client/src/redux/userReducer/constants.js",[],"/home/kuinoso/Projects/arkaven/client/src/redux/gameReducer/constants.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/Footer/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/Home/index.jsx",["286"],"import React from 'react';\nimport { Link, HashRouter } from 'react-router-dom';\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport pTetris from '../../images/tetrisT.png';\nimport pSnake from '../../images/snakeT.png';\nimport pMemory from '../../images/memoryT.png';\nimport p2048 from '../../images/2048T.png';\n\nimport { useStyles } from './styles.js';\nimport MobileGames from '../MobileGames';\n\nexport default function Home() {\n    const classes = useStyles();\n    const theme = useTheme();\n    const small = useMediaQuery(theme.breakpoints.down('md'));\n\n    const buttonData = [\n        {\n            link: '/tetrisGame',\n            image: pTetris,\n        },\n        {\n            link: '/2048Game',\n            image: p2048,\n        },\n        {\n            link: '/memoryGame',\n            image: pMemory,\n        },\n        {\n            link: '/snakeGame',\n            image: pSnake,\n        },\n    ];\n\n    return (\n        <div>\n            {small ?\n                <MobileGames />\n                :\n                <div className={classes.container}>\n                    {buttonData.map((item, i) =>\n                        <Link key={i} to={item.link}>\n                            <img src={item.image} alt={item.link.split('/')[1]} className={classes.image} />\n                        </Link>\n                    )}\n                </div>\n            }\n        </div>\n    );\n};","/home/kuinoso/Projects/arkaven/client/src/components/Profile/index.jsx",["287"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\nimport { useStyles } from './styles.js';\nimport UpdateInfo from '../UpdateInfo';\nimport UpdatePassword from '../UpdatePassword';\n\nexport default function Profile() {\n    const classes = useStyles();\n    const history = useHistory();\n\n    const loggedIn = useSelector(\n        (store) => store.UserReducer.loggedIn\n    );\n    const userData = useSelector(\n        (store) => store.UserReducer.userData\n    );\n\n    const [open, setOpen] = useState(false);\n    const [modal, setModal] = useState('');\n\n    useEffect(() => {\n        if (!loggedIn) {\n            history.push('/');\n        };\n    }, [loggedIn]);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleModal = (type) => {\n        setModal(type);\n\n        handleOpen();\n    };\n\n    const innerModal = (type) => {\n        if (type === 'info') {\n            return <UpdateInfo\n                userData={userData}\n                changeModal={setModal}\n                openModal={handleOpen}\n                closeModal={handleClose}\n            />\n        };\n\n        if (type === 'password') {\n            return <UpdatePassword\n                id={userData._id}\n                changeModal={setModal}\n                openModal={handleOpen}\n                closeModal={handleClose}\n            />\n        };\n    };\n\n    return (\n        <div>\n            {userData &&\n                <div className={classes.container}>\n                    <img src={userData.img} alt='upload' className={classes.image} />\n                    <h1 className={classes.name}>{userData.name}</h1>\n                    <div className={classes.buttons}>\n                        <Button\n                            variant=\"contained\"\n                            className={classes.modal}\n                            onClick={() => handleModal('info')}\n                        >\n                            Update my info\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            className={classes.modal}\n                            onClick={() => handleModal('password')}\n                        >\n                            Change password\n                        </Button>\n                    </div>\n                    <Modal\n                        open={open}\n                        onClose={handleClose}\n                        aria-labelledby=\"simple-modal-title\"\n                        aria-describedby=\"simple-modal-description\"\n                    >\n                        {innerModal(modal)}\n                    </Modal>\n                </div>\n\n            }\n        </div>\n    );\n};","/home/kuinoso/Projects/arkaven/client/src/components/NewPassword/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Main/index.jsx",["288","289","290"],"/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Main/index.jsx",["291"],"import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport initializeDeck from '../deck';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useStyles } from './styles.js';\nimport throne from '../../../images/throne.jpeg';\nimport matchSound from '../../../sounds/match.mp3';\nimport gotTheme from '../../../sounds/got.mp3';\nimport tMemory from '../../../images/memoryT.png';\nimport Board from '../Board';\nimport Display from '../../Display';\nimport Highscores from '../../Highscores';\nimport UserScores from '../../UserScores';\nimport MobileGames from '../../MobileGames';\n\nexport default function Main() {\n    const classes = useStyles();\n    const theme = useTheme();\n    const small = useMediaQuery(theme.breakpoints.down('md'));\n    const myRef1 = useRef();\n    const myRef2 = useRef();\n\n    const [cards, setCards] = useState([]);\n    const [flipped, setFlipped] = useState([]);\n    const [solved, setSolved] = useState([]);\n    const [disabled, setDisabled] = useState(false);\n    const [gameOver, setFinished] = useState(false);\n    const [clicks, setClicks] = useState(1);\n    const [scores, setScores] = useState([]);\n    const [userScores, setUserScores] = useState([]);\n\n    const loggedIn = useSelector(\n        (store) => store.UserReducer.loggedIn\n    );\n    const game = useSelector(\n        (store) => store.GameReducer.allGames.filter(item => item.name === 'memory')[0]\n    );\n    const user = useSelector(\n        (store) => store.UserReducer.loggedUser\n    );\n    const users = useSelector(\n        (store) => store.UserReducer.allUsers\n    );\n\n    const getScores = () => {\n        axios.get(`/api/highscores/${game._id}`)\n            .then(res => {\n                const highscores = res.data;\n                const list = [];\n\n                for (let i = 0; i < highscores.length; i++) {\n                    const usr = users.filter(us => us._id === highscores[i].user)[0];\n                    if (usr && highscores[i]) {\n                        list.push({\n                            id: highscores[i].user,\n                            score: highscores[i].score,\n                            name: usr.name,\n                            img: usr.img,\n                        });\n                    };\n                };\n                list.sort(function (a, b) {\n                    const keyA = a.score;\n                    const keyB = b.score;\n                    // Compare the 2 dates\n                    if (keyA < keyB) return -1;\n                    if (keyA > keyB) return 1;\n                    return 0;\n                });\n                setScores(list);\n            })\n            .catch(err => console.log(err));\n    };\n\n    const getUserScores = () => {\n        axios.get(`/api/userScores/${user}`)\n            .then(res => {\n                const userScores = res.data.filter(item => item.game === game._id);\n\n                userScores.sort(function (a, b) {\n                    const keyA = a.score;\n                    const keyB = b.score;\n                    // Compare the 2 dates\n                    if (keyA < keyB) return -1;\n                    if (keyA > keyB) return 1;\n                    return 0;\n                });\n\n                const topUserScores = userScores.slice(0, 10);\n\n                setUserScores(topUserScores);\n            })\n            .catch(err => console.log(err));\n    };\n\n    useEffect(() => {\n        setCards(initializeDeck());\n        preloadMedia();\n    }, []);\n\n    useEffect(() => {\n        getScores();\n\n        if (user) {\n            getUserScores();\n        };\n    }, [user]);\n\n    useEffect(() => {\n        preloadDeckImages();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cards.join(\",\")]);\n\n    const preloadDeckImages = () => {\n        // eslint-disable-next-line array-callback-return\n        cards.map(card => {\n            const src = require(`../../../images/${card.type}.png`).default;\n\n            new Image().src = src;\n        });\n    };\n\n    const preloadMedia = () => {\n        const src = require('../../../images/throne.jpeg').default;\n\n        new Image().src = src;\n    };\n\n    const sameCardClicked = (id) => flipped.includes(id);\n\n    const isMatched = (id) => {\n        const clickedCard = cards.find(card => card.id === id);\n        const flippedCard = cards.find(card => flipped[0] === card.id);\n\n        return clickedCard.type === flippedCard.type\n    };\n\n    const resetCards = () => {\n        setFlipped([]);\n\n        setDisabled(false);\n    };\n\n    const handleClick = (id) => {\n        setDisabled(true);\n\n        setClicks(clicks + 1);\n\n        if (flipped.length === 0) {\n            setFlipped([id]);\n\n            setDisabled(false);\n        } else {\n            if (sameCardClicked(id)) return;\n\n            setFlipped([...flipped, id]);\n\n            if (isMatched(id)) {\n                setSolved([...solved, flipped[0], id]);\n\n                resetCards();\n\n                if (solved.length === 10) {\n                    myRef2.current.volume = 1;\n                    myRef2.current.play();\n\n                    if (loggedIn) {\n                        const data = {\n                            score: clicks / 2,\n                            user: user,\n                            game: game._id,\n                        };\n                        axios.post('/api/newScore', data)\n                            .then(() => {\n                                getScores();\n                                getUserScores();\n                            })\n                            .catch(err => console.log(err));\n                    };\n\n                    Swal.fire({\n                        title: `You won with ${Math.floor(clicks / 2)} attempts`,\n                        text: 'Now YOU are the rightful heir to the iron throne!',\n                        imageUrl: throne,\n                        imageWidth: 400,\n                        imageHeight: 200,\n                        imageAlt: 'Throne image',\n                    }).then(() => {\n                        setFinished(true);\n\n                        myRef2.current.pause();\n                        myRef2.current.currentTime = 0;\n                    });\n                } else {\n                    myRef1.current.volume = 1;\n                    myRef1.current.pause();\n                    myRef1.current.currentTime = 0;\n                    myRef1.current.play();\n                };\n\n            } else {\n                setTimeout(resetCards, 1200);\n            };\n        };\n    };\n\n    const playAgain = () => {\n        setSolved([]);\n\n        setCards(initializeDeck());\n\n        setFinished(false);\n\n        setClicks(1);\n    };\n\n    return (\n        <div>\n            {small ?\n                <MobileGames />\n                :\n                <div className={classes.wrapper}>\n                    {scores && <Highscores scores={scores} />}\n                    <div className={classes.container}>\n                        <Board\n                            cards={cards}\n                            flipped={flipped}\n                            handleClick={handleClick}\n                            disabled={disabled}\n                            solved={solved}\n                        />\n                        <div className={classes.leftDiv}>\n                            <div className={classes.infoDiv}>\n                                <img src={tMemory} alt='memory' className={classes.title} />\n                                <h3 className={classes.text}>\n                                    Find all the house sigil pairs and become the ruler of Westeros!\n                                    The best score is the lowest.\n                        </h3>\n                            </div>\n                            <Display text={`Score: ${Math.floor(clicks / 2)}`} />\n                            {gameOver &&\n                                <div>\n                                    <Display gameOver={gameOver} text='Game Over' />\n                                </div>\n                            }\n                            <button className={classes.button} onClick={playAgain}>\n                                {gameOver ? 'Play Again' : 'Start Again'}\n                            </button>\n                        </div>\n                        <audio\n                            ref={myRef1}\n                            src={matchSound}\n                            loop={false}\n                        />\n                        <audio\n                            ref={myRef2}\n                            src={gotTheme}\n                            loop={false}\n                        />\n                    </div>\n                    <UserScores scores={userScores} loggedIn={loggedIn} />\n                </div>\n            }\n        </div>\n    );\n};","/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Main/index.jsx",["292"],"import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { createStage, checkCollision } from '../gameHelpers';\nimport { useTetrisPlayer } from '../../../hooks/useTetrisPlayer';\nimport { useTetrisStage } from '../../../hooks/useTetrisStage';\nimport { useTetrisStatus } from '../../../hooks/useTetrisStatus';\nimport { useInterval } from '../../../hooks/useInterval';\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useStyles } from './styles.js';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport overSound from '../../../sounds/over.mp3';\nimport rotateSound from '../../../sounds/rotate.mp3';\nimport collisionSound from '../../../sounds/collision.mp3';\nimport clearedSound from '../../../sounds/cleared.mp3';\nimport os from '../../../sounds/tetrisOs.mp3';\nimport tTetris from '../../../images/tetrisT.png';\nimport gO from '../../../images/go.png';\nimport Stage from '../Stage';\nimport Display from '../../Display';\nimport Highscores from '../../Highscores';\nimport UserScores from '../../UserScores';\nimport MobileGames from '../../MobileGames';\n\nexport default function Main() {\n    const classes = useStyles();\n    const theme = useTheme();\n    const small = useMediaQuery(theme.breakpoints.down('md'));\n    const ref1 = useRef();\n    const ref2 = useRef();\n    const ref3 = useRef();\n    const ref4 = useRef();\n\n    const loggedIn = useSelector(\n        (store) => store.UserReducer.loggedIn\n    );\n    const game = useSelector(\n        (store) => store.GameReducer.allGames.filter(item => item.name === 'tetris')[0]\n    );\n    if (loggedIn) { }\n    const user = useSelector(\n        (store) => store.UserReducer.loggedUser\n    );\n    const users = useSelector(\n        (store) => store.UserReducer.allUsers\n    );\n\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = useTetrisPlayer();\n    const [stage, setStage, rowsCleared] = useTetrisStage(player, resetPlayer);\n    const [score, setScore, rows, setRows, dropTime, setDropTime, ref5] = useTetrisStatus(rowsCleared);\n\n    const [gameOver, setGameOver] = useState(false);\n    const [started, setStarted] = useState(false);\n    const [scores, setScores] = useState([]);\n    const [userScores, setUserScores] = useState([]);\n\n    window.addEventListener(\"keydown\", function (e) {\n        if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {\n            e.preventDefault();\n        }\n    }, false);\n\n    const getScores = () => {\n        axios.get(`/api/highscores/${game._id}`)\n            .then(res => {\n                const highscores = res.data;\n                const list = []\n\n                for (let i = 0; i < highscores.length; i++) {\n                    const usr = users.filter(us => us._id === highscores[i].user)[0];\n                    if (usr && highscores[i]) {\n                        list.push({\n                            id: highscores[i].user,\n                            score: highscores[i].score,\n                            name: usr.name,\n                            img: usr.img,\n                        });\n                    };\n                };\n                setScores(list);\n            })\n            .catch(err => console.log(err));\n    };\n\n    const getUserScores = () => {\n        axios.get(`/api/userScores/${user}`)\n            .then(res => {\n                const userScores = res.data.filter(item => item.game === game._id);\n\n                userScores.sort(function (a, b) {\n                    const keyA = a.score;\n                    const keyB = b.score;\n                    // Compare the 2 dates\n                    if (keyA < keyB) return 1;\n                    if (keyA > keyB) return -1;\n                    return 0;\n                });\n\n                const topUserScores = userScores.slice(0, 10);\n\n                setUserScores(topUserScores);\n            })\n            .catch(err => console.log(err));\n    };\n\n    useEffect(() => {\n        getScores();\n\n        if (user) {\n            getUserScores();\n        };\n    }, [user]);\n\n    const movePlayer = dir => {\n        if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n            updatePlayerPos({ x: dir, y: 0 });\n        };\n    };\n\n    const startGame = () => {\n        ref2.current.volume = 0.2;\n        ref2.current.play();\n\n        setStarted(true);\n\n        setStage(createStage());\n\n        setDropTime(1000);\n\n        resetPlayer();\n\n        setGameOver(false);\n\n        setScore(0);\n\n        setRows(0);\n    };\n\n    const drop = () => {\n        if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n            updatePlayerPos({ x: 0, y: 1, collided: false });\n        } else {\n            if (player.pos.y < 1) {\n                ref2.current.currentTime = 0;\n                ref2.current.pause();\n\n                ref1.current.volume = 1;\n                ref1.current.play();\n\n                setGameOver(true);\n\n                setDropTime(null);\n\n                if (loggedIn) {\n                    const data = {\n                        score: score,\n                        user: user,\n                        game: game._id,\n                    };\n                    axios.post('/api/newScore', data)\n                        .then(() => {\n                            getScores();\n                            getUserScores();\n                        })\n                        .catch(err => console.log(err));\n                };\n\n                Swal.fire({\n                    text: `Your score was ${score}!`,\n                    imageUrl: gO,\n                    imageWidth: 400,\n                    imageAlt: 'GameOver',\n                });\n            };\n\n            ref4.current.volume = 1;\n            ref4.current.play();\n\n            updatePlayerPos({ x: 0, y: 0, collided: true });\n        };\n    };\n\n    const keyUp = ({ keyCode }) => {\n        if (!gameOver) {\n            if (keyCode === 40) {\n                setDropTime(1000 - (score / 4));\n            };\n        };\n    };\n\n    const dropPlayer = () => {\n        setDropTime(null);\n\n        drop();\n    };\n\n    const move = ({ keyCode }) => {\n        if (!gameOver) {\n            if (keyCode === 37) {\n                movePlayer(-1);\n            } else if (keyCode === 39) {\n                movePlayer(1);\n            } else if (keyCode === 40) {\n                dropPlayer();\n            } else if (keyCode === 38) {\n                ref3.current.volume = 1;\n                ref3.current.currentTime = 0;\n                ref3.current.play();\n\n                playerRotate(stage, 1);\n            };\n        };\n    };\n\n    useInterval(() => {\n        drop();\n    }, dropTime);\n\n    return (\n        <div>\n            {small ?\n                <MobileGames />\n                :\n                <div\n                    className={classes.wrapper}\n                    role='button'\n                    tabIndex='0'\n                    onKeyDown={e => move(e)}\n                    onKeyUp={keyUp}\n                >\n                    {scores && <Highscores scores={scores} />}\n                    <div className={classes.container}>\n                        <Stage stage={stage} />\n                        <div className={classes.leftDiv}>\n                            <div className={classes.infoDiv}>\n                                <img src={tTetris} alt='tetris' className={classes.title} />\n                                <h3 className={classes.text}>\n                                    Make full horizontal lines with the different\n                                    tetrominos that fall into the game area.\n                                    Full lines will then disappear and provide points.\n                                    Use the left and right arrow keys to move the tetromino, use the\n                                    down arrow key for the tetrimino to fall faster and the up arrow key to rotate the tetromino.\n                        </h3>\n                            </div>\n                            <div>\n                                <Display text={`Score: ${score}`} />\n                                <Display text={`Rows: ${rows}`} />\n                            </div>\n                            {gameOver &&\n                                <div>\n                                    <Display gameOver={gameOver} text='Game Over' />\n                                </div>\n                            }\n                            <button className={classes.button} onClick={startGame}>\n                                {gameOver ? 'Play Again' : started ? 'Start Again' : 'Start Game'}\n                            </button>\n                        </div>\n                    </div>\n                    <audio\n                        ref={ref1}\n                        src={overSound}\n                        loop={false}\n                    />\n                    <audio\n                        ref={ref2}\n                        src={os}\n                        loop={true}\n                    />\n                    <audio\n                        ref={ref3}\n                        src={rotateSound}\n                        loop={false}\n                    />\n                    <audio\n                        ref={ref4}\n                        src={collisionSound}\n                        loop={false}\n                    />\n                    <audio\n                        ref={ref5}\n                        src={clearedSound}\n                        loop={false}\n                    />\n                    <UserScores scores={userScores} loggedIn={loggedIn} />\n                </div>\n            }\n        </div>\n    );\n};","/home/kuinoso/Projects/arkaven/client/src/components/2048Game/Main/index.jsx",["293","294"],"import React, { useState, useEffect } from \"react\";\nimport { useSelector } from 'react-redux';\nimport cloneDeep from \"lodash.clonedeep\";\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport { useEvent } from \"../gameHelpers\";\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useStyles } from './styles.js';\nimport t2048 from '../../../images/2048T.png';\nimport gO from '../../../images/go.png';\nimport Block from '../Block';\nimport Display from '../../Display';\nimport Highscores from '../../Highscores';\nimport UserScores from '../../UserScores';\nimport MobileGames from '../../MobileGames';\n\nexport default function Main() {\n    const classes = useStyles();\n    const theme = useTheme();\n    const small = useMediaQuery(theme.breakpoints.down('md'));\n\n    const loggedIn = useSelector(\n        (store) => store.UserReducer.loggedIn\n    );\n    const game = useSelector(\n        (store) => store.GameReducer.allGames.filter(item => item.name === '2048')[0]\n    );\n    const user = useSelector(\n        (store) => store.UserReducer.loggedUser\n    );\n    const users = useSelector(\n        (store) => store.UserReducer.allUsers\n    );\n\n    const UP_ARROW = 38;\n    const DOWN_ARROW = 40;\n    const LEFT_ARROW = 37;\n    const RIGHT_ARROW = 39;\n\n    const [data, setData] = useState([\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n    ]);\n    const [gameOver, setGameOver] = useState(false);\n    const [score, setScore] = useState(0);\n    const [scores, setScores] = useState([]);\n    const [userScores, setUserScores] = useState([]);\n\n    window.addEventListener(\"keydown\", function (e) {\n        if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {\n            e.preventDefault();\n        }\n    }, false);\n\n    const getScores = () => {\n        axios.get(`/api/highscores/${game._id}`)\n            .then(res => {\n                const highscores = res.data;\n                const list = []\n\n                for (let i = 0; i < highscores.length; i++) {\n                    const usr = users.filter(us => us._id === highscores[i].user)[0];\n                    if (usr && highscores[i]) {\n                        list.push({\n                            id: highscores[i].user,\n                            score: highscores[i].score,\n                            name: usr.name,\n                            img: usr.img,\n                        });\n                    };\n                };\n                setScores(list);\n            })\n            .catch(err => console.log(err));\n    };\n\n    const getUserScores = () => {\n        axios.get(`/api/userScores/${user}`)\n            .then(res => {\n                const userScores = res.data.filter(item => item.game === game._id);\n\n                userScores.sort(function (a, b) {\n                    const keyA = a.score;\n                    const keyB = b.score;\n                    // Compare the 2 dates\n                    if (keyA < keyB) return 1;\n                    if (keyA > keyB) return -1;\n                    return 0;\n                });\n\n                const topUserScores = userScores.slice(0, 10);\n\n                setUserScores(topUserScores);\n            })\n            .catch(err => console.log(err));\n    };\n\n    const initialize = () => {\n        let newGrid = cloneDeep(data);\n\n        addNumber(newGrid);\n\n        addNumber(newGrid);\n\n        setData(newGrid);\n    };\n\n    const addNumber = (newGrid) => {\n        let added = false;\n        let gridFull = false;\n        let attempts = 0;\n\n        while (!added) {\n            if (gridFull) {\n                break;\n            };\n\n            let rand1 = Math.floor(Math.random() * 4);\n            let rand2 = Math.floor(Math.random() * 4);\n\n            attempts++;\n\n            if (newGrid[rand1][rand2] === 0) {\n                newGrid[rand1][rand2] = Math.random() > 0.5 ? 2 : 4;\n                added = true;\n            };\n\n            if (attempts > 50) {\n                gridFull = true;\n                let gameOverr = checkIfGameOver();\n\n                if (gameOverr) {\n                    alert(\"game over\");\n                };\n            };\n        };\n    };\n\n    const swipeLeft = (dummy) => {\n        let oldGrid = data;\n        let newArray = cloneDeep(data);\n\n        for (let i = 0; i < 4; i++) {\n            let b = newArray[i];\n            let slow = 0;\n            let fast = 1;\n\n            while (slow < 4) {\n                if (fast === 4) {\n                    fast = slow + 1;\n\n                    slow++;\n\n                    continue;\n                };\n\n                if (b[slow] === 0 && b[fast] === 0) {\n                    fast++;\n                } else if (b[slow] === 0 && b[fast] !== 0) {\n                    b[slow] = b[fast];\n                    b[fast] = 0;\n\n                    fast++;\n                } else if (b[slow] !== 0 && b[fast] === 0) {\n                    fast++;\n                } else if (b[slow] !== 0 && b[fast] !== 0) {\n                    if (b[slow] === b[fast]) {\n                        b[slow] = b[slow] + b[fast];\n                        b[fast] = 0;\n                        fast = slow + 1;\n\n                        slow++;\n                    } else {\n                        slow++;\n                        fast = slow + 1;\n                    };\n                };\n            };\n        };\n\n        if (JSON.stringify(oldGrid) !== JSON.stringify(newArray)) {\n            addNumber(newArray);\n        };\n\n        if (dummy) {\n            return newArray;\n        } else {\n            setData(newArray);\n        };\n    };\n\n    const swipeRight = (dummy) => {\n        let oldData = data;\n        let newArray = cloneDeep(data);\n\n        for (let i = 3; i >= 0; i--) {\n            let b = newArray[i];\n            let slow = b.length - 1;\n            let fast = slow - 1;\n\n            while (slow > 0) {\n                if (fast === -1) {\n                    fast = slow - 1;\n\n                    slow--;\n\n                    continue;\n                };\n\n                if (b[slow] === 0 && b[fast] === 0) {\n                    fast--;\n                } else if (b[slow] === 0 && b[fast] !== 0) {\n                    b[slow] = b[fast];\n                    b[fast] = 0;\n\n                    fast--;\n                } else if (b[slow] !== 0 && b[fast] === 0) {\n                    fast--;\n                } else if (b[slow] !== 0 && b[fast] !== 0) {\n                    if (b[slow] === b[fast]) {\n                        b[slow] = b[slow] + b[fast];\n                        b[fast] = 0;\n                        fast = slow - 1;\n\n                        slow--;\n                    } else {\n                        slow--;\n\n                        fast = slow - 1;\n                    };\n                };\n            };\n        };\n\n        if (JSON.stringify(newArray) !== JSON.stringify(oldData)) {\n            addNumber(newArray);\n        };\n\n        if (dummy) {\n            return newArray;\n        } else {\n            setData(newArray);\n        };\n    };\n\n    const swipeDown = (dummy) => {\n        let b = cloneDeep(data);\n        let oldData = JSON.parse(JSON.stringify(data));\n\n        for (let i = 3; i >= 0; i--) {\n            let slow = b.length - 1;\n            let fast = slow - 1;\n\n            while (slow > 0) {\n                if (fast === -1) {\n                    fast = slow - 1;\n\n                    slow--;\n\n                    continue;\n                };\n\n                if (b[slow][i] === 0 && b[fast][i] === 0) {\n                    fast--;\n                } else if (b[slow][i] === 0 && b[fast][i] !== 0) {\n                    b[slow][i] = b[fast][i];\n                    b[fast][i] = 0;\n\n                    fast--;\n                } else if (b[slow][i] !== 0 && b[fast][i] === 0) {\n                    fast--;\n                } else if (b[slow][i] !== 0 && b[fast][i] !== 0) {\n                    if (b[slow][i] === b[fast][i]) {\n                        b[slow][i] = b[slow][i] + b[fast][i];\n                        b[fast][i] = 0;\n                        fast = slow - 1;\n\n                        slow--;\n                    } else {\n                        slow--;\n\n                        fast = slow - 1;\n                    };\n                };\n            };\n        };\n\n        if (JSON.stringify(b) !== JSON.stringify(oldData)) {\n            addNumber(b);\n        };\n\n        if (dummy) {\n            return b;\n        } else {\n            setData(b);\n        };\n    };\n\n    const swipeUp = (dummy) => {\n        let b = cloneDeep(data);\n        let oldData = JSON.parse(JSON.stringify(data));\n\n        for (let i = 0; i < 4; i++) {\n            let slow = 0;\n            let fast = 1;\n\n            while (slow < 4) {\n                if (fast === 4) {\n                    fast = slow + 1;\n\n                    slow++;\n\n                    continue;\n                };\n\n                if (b[slow][i] === 0 && b[fast][i] === 0) {\n                    fast++;\n                } else if (b[slow][i] === 0 && b[fast][i] !== 0) {\n                    b[slow][i] = b[fast][i];\n                    b[fast][i] = 0;\n\n                    fast++;\n                } else if (b[slow][i] !== 0 && b[fast][i] === 0) {\n                    fast++;\n                } else if (b[slow][i] !== 0 && b[fast][i] !== 0) {\n                    if (b[slow][i] === b[fast][i]) {\n                        b[slow][i] = b[slow][i] + b[fast][i];\n                        b[fast][i] = 0;\n                        fast = slow + 1;\n\n                        slow++;\n                    } else {\n                        slow++;\n\n                        fast = slow + 1;\n                    };\n                };\n            };\n        };\n\n        if (JSON.stringify(oldData) !== JSON.stringify(b)) {\n            addNumber(b);\n        };\n\n        if (dummy) {\n            return b;\n        } else {\n            setData(b);\n        };\n    };\n\n    const checkIfGameOver = () => {\n        let checker = swipeLeft(true);\n\n        if (JSON.stringify(data) !== JSON.stringify(checker)) {\n            return false;\n        };\n\n        let checker2 = swipeDown(true);\n\n        if (JSON.stringify(data) !== JSON.stringify(checker2)) {\n            return false;\n        };\n\n        let checker3 = swipeRight(true);\n\n        if (JSON.stringify(data) !== JSON.stringify(checker3)) {\n            return false;\n        };\n\n        let checker4 = swipeUp(true);\n\n        if (JSON.stringify(data) !== JSON.stringify(checker4)) {\n            return false;\n        };\n\n        return true;\n    };\n\n    const resetGame = () => {\n        setGameOver(false);\n\n        const emptyGrid = [\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0],\n        ];\n\n        addNumber(emptyGrid);\n\n        addNumber(emptyGrid);\n\n        setData(emptyGrid);\n\n        setScore(0);\n    };\n\n    const handleKeyDown = (event) => {\n        if (gameOver) {\n            return;\n        };\n        switch (event.keyCode) {\n            case UP_ARROW:\n                swipeUp();\n                break;\n            case DOWN_ARROW:\n                swipeDown();\n                break;\n            case LEFT_ARROW:\n                swipeLeft();\n                break;\n            case RIGHT_ARROW:\n                swipeRight();\n                break;\n            default:\n                break;\n        };\n\n        let gameOverr = checkIfGameOver();\n\n        if (gameOverr) {\n            Swal.fire({\n                text: `Your score was ${score}!`,\n                imageUrl: gO,\n                imageWidth: 400,\n                imageAlt: 'GameOver',\n            });\n\n            setGameOver(true);\n\n            if (loggedIn) {\n                const data = {\n                    score: score,\n                    user: user,\n                    game: game._id,\n                };\n                axios.post('/api/newScore', data)\n                    .then(() => {\n                        getScores();\n                        getUserScores();\n                    })\n                    .catch(err => console.log(err));\n            };\n        };\n    };\n\n    useEffect(() => {\n        initialize();\n    }, []);\n\n    useEffect(() => {\n        getScores();\n\n        if (user) {\n            getUserScores();\n        };\n    }, [user]);\n\n    useEvent(\"keydown\", handleKeyDown);\n\n    return (\n        <div>\n            {small ?\n                <MobileGames />\n                :\n                <div className={classes.wrapper}>\n                    {scores && <Highscores scores={scores} />}\n                    <div className={classes.container}>\n                        <div className={classes.board}>\n                            {data.map((row, oneIndex) => {\n                                return (\n                                    <div style={{ display: \"flex\" }} key={oneIndex}>\n                                        {row.map((digit, index) => {\n                                            if (digit > score) {\n                                                setScore(digit);\n                                            };\n\n                                            return <Block num={digit} key={index} />\n                                        })}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                        <div className={classes.leftDiv}>\n                            <div className={classes.infoDiv}>\n                                <img src={t2048} alt='2048' className={classes.title} />\n                                <h3 className={classes.text}>\n                                    Use your arrow keys to move the tiles.\n                                    Tiles with the same number merge into one when they touch.\n                                    Add them up to reach 2048!\n                    </h3>\n                            </div>\n                            <Display text={`Score: ${score}`} />\n                            {gameOver &&\n                                <div>\n                                    <Display gameOver={gameOver} text='Game Over' />\n                                </div>\n                            }\n                            <button className={classes.button} onClick={resetGame}>\n                                {gameOver ? 'Play Again' : 'Start Again'}\n                            </button>\n                        </div>\n                    </div>\n                    <UserScores scores={userScores} loggedIn={loggedIn} />\n                </div>\n            }\n        </div>\n    );\n};","/home/kuinoso/Projects/arkaven/client/src/components/Navbar/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/Footer/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/Home/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/Profile/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/NewPassword/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Main/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/2048Game/Main/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Main/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/Navbar/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/2048Game/gameHelpers.js",[],"/home/kuinoso/Projects/arkaven/client/src/hooks/useInterval.js",[],"/home/kuinoso/Projects/arkaven/client/src/hooks/useTetrisStatus.js",["295"],"import { useState, useEffect, useCallback, useRef } from 'react';\n\nexport const useTetrisStatus = rowsCleared => {\n    const ref5 = useRef();\n\n    const [score, setScore] = useState(0);\n    const [rows, setRows] = useState(0);\n    const [dropTime, setDropTime] = useState(null);\n\n    const linePoints = [40, 100, 300, 1200];\n\n    const calcScore = useCallback(() => {\n        if (rowsCleared > 0) {\n            ref5.current.volume = 1;\n            ref5.current.play();\n\n            setScore(prev => prev + linePoints[rowsCleared - 1]);\n\n            setDropTime(1000 - (score / 4));\n\n            setRows(prev => prev + rowsCleared);\n        };\n    }, [linePoints, rowsCleared, score]);\n\n    useEffect(() => {\n        calcScore();\n    }, [calcScore, rowsCleared, score]);\n\n    return [score, setScore, rows, setRows, dropTime, setDropTime, ref5];\n};","/home/kuinoso/Projects/arkaven/client/src/hooks/useTetrisStage.js",[],"/home/kuinoso/Projects/arkaven/client/src/hooks/useTetrisPlayer.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/gameHelpers.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Main/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/MobileGames/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/UpdatePassword/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/UpdateInfo/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/Display/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/UserScores/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/Highscores/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/2048Game/Block/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Stage/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/ResetPassword/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/Login/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/SignUp/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/deck.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/tetrominos.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/MobileGames/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/UpdatePassword/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/UpdateInfo/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/Display/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/UserScores/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/Highscores/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/2048Game/Block/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Stage/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/ResetPassword/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/Login/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/SignUp/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Board/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Food/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Snake/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Food/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/snakeGame/Snake/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Board/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Cell/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/tetrisGame/Cell/styles.js",[],"/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Card/index.jsx",[],"/home/kuinoso/Projects/arkaven/client/src/components/memoryGame/Card/styles.js",[],{"ruleId":"296","replacedBy":"297"},{"ruleId":"298","replacedBy":"299"},{"ruleId":"300","severity":1,"message":"301","line":2,"column":27,"nodeType":"302","messageId":"303","endLine":2,"endColumn":33},{"ruleId":"304","severity":1,"message":"305","line":33,"column":6,"nodeType":"306","endLine":33,"endColumn":8,"suggestions":"307"},{"ruleId":"300","severity":1,"message":"308","line":2,"column":16,"nodeType":"302","messageId":"303","endLine":2,"endColumn":26},{"ruleId":"304","severity":1,"message":"309","line":28,"column":8,"nodeType":"306","endLine":28,"endColumn":18,"suggestions":"310"},{"ruleId":"304","severity":1,"message":"311","line":134,"column":8,"nodeType":"306","endLine":134,"endColumn":10,"suggestions":"312"},{"ruleId":"304","severity":1,"message":"313","line":142,"column":8,"nodeType":"306","endLine":142,"endColumn":14,"suggestions":"314"},{"ruleId":"304","severity":1,"message":"315","line":327,"column":8,"nodeType":"306","endLine":327,"endColumn":19,"suggestions":"316"},{"ruleId":"304","severity":1,"message":"313","line":110,"column":8,"nodeType":"306","endLine":110,"endColumn":14,"suggestions":"317"},{"ruleId":"304","severity":1,"message":"313","line":113,"column":8,"nodeType":"306","endLine":113,"endColumn":14,"suggestions":"318"},{"ruleId":"304","severity":1,"message":"319","line":453,"column":8,"nodeType":"306","endLine":453,"endColumn":10,"suggestions":"320"},{"ruleId":"304","severity":1,"message":"313","line":461,"column":8,"nodeType":"306","endLine":461,"endColumn":14,"suggestions":"321"},{"ruleId":"304","severity":1,"message":"322","line":10,"column":11,"nodeType":"323","endLine":10,"endColumn":44},"no-native-reassign",["324"],"no-negated-in-lhs",["325"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["326"],"'HashRouter' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["327"],"React Hook useEffect has a missing dependency: 'getRandomColor'. Either include it or remove the dependency array.",["328"],"React Hook useEffect has missing dependencies: 'getScores' and 'getUserScores'. Either include them or remove the dependency array.",["329"],"React Hook useEffect has missing dependencies: 'checkIfCollapsed', 'checkIfEat', and 'checkIfOutOfBorders'. Either include them or remove the dependency array.",["330"],["331"],["332"],"React Hook useEffect has a missing dependency: 'initialize'. Either include it or remove the dependency array.",["333"],["334"],"The 'linePoints' array makes the dependencies of useCallback Hook (at line 23) change on every render. Move it inside the useCallback callback. Alternatively, wrap the initialization of 'linePoints' in its own useMemo() Hook.","VariableDeclarator","no-global-assign","no-unsafe-negation",{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"341","fix":"345"},{"desc":"341","fix":"346"},{"desc":"347","fix":"348"},{"desc":"341","fix":"349"},"Update the dependencies array to be: [dispatch]",{"range":"350","text":"351"},"Update the dependencies array to be: [history, loggedIn]",{"range":"352","text":"353"},"Update the dependencies array to be: [getRandomColor]",{"range":"354","text":"355"},"Update the dependencies array to be: [getScores, getUserScores, user]",{"range":"356","text":"357"},"Update the dependencies array to be: [checkIfCollapsed, checkIfEat, checkIfOutOfBorders, snakeDots]",{"range":"358","text":"359"},{"range":"360","text":"357"},{"range":"361","text":"357"},"Update the dependencies array to be: [initialize]",{"range":"362","text":"363"},{"range":"364","text":"357"},[1136,1138],"[dispatch]",[829,839],"[history, loggedIn]",[4424,4426],"[getRandomColor]",[4541,4547],"[getScores, getUserScores, user]",[9078,9089],"[checkIfCollapsed, checkIfEat, checkIfOutOfBorders, snakeDots]",[3741,3747],[4093,4099],[12214,12216],"[initialize]",[12331,12337]]